# Requiere de la instalación del siguiente módulo
#   pip install pysphere
#
# Podemos encontrar información sobre el módulo pyton en:
# https://github.com/itnihao/pysphere/wiki/Quick-guide-to-start-using-PySphere
#
#
---
- hosts: localhost

  vars:
    ESXi:
        host: 10.1.1.18
        vm_name: MI-VM
        admin_user: root
        admin_password: Contraseña

    script_content: |
      #!/usr/bin/env python

      from pysphere import VIServer 
      import ssl

      # Permitimos el uso de certificados autofirmados.
      ssl._create_default_https_context = ssl._create_unverified_context

      server = VIServer()
      server.connect("{{ ESXi.host }}", "{{ ESXi.admin_user }}", "{{ mi_password }}")
      vm = server.get_vm_by_name("{{ ESXi.vm_name }}")

      # La creación del snapshot es síncrona, por lo que no continuará hasta que finalice.
      # Si quisiéramos que fuera aiíncrona, tendráimos que hacer algo así.
      #   task = vm.create_snapshot("mysnapshot", sync_run=False)
      vm.create_snapshot("Test snapshot", description="Created by pysphere", memory=False, quiesce=False)
      server.disconnect() 
      quit(0)
    
    vars_prompt:
      - name: "mi_password"
        prompt: "Introduzca la contraseña de {{ ESXi.admin_user }} ESXi: "
        private: yes
        default: contraseña

    tasks:

      # En teoría, se podría pasar inline el código del script con:
      #    shell: |
      #      bla, bla,
      #      bla ...
      #
      # Pero si lo hacemos de esta forma, no se respeta la identación (cosa que resulta crítica en el caso de pytho).
      # La solución ha sido crear una variable y pasarla al módulo shell.
      - name: Creación snapshot
        shell: "{{ script_content }}"
        args:
            executable: /usr/bin/python
        delegate_to: localhost

      - name: Advertencia
        debug:
          msg: No te olvides de consolidar el snapshot creado tras revisar que todo está OK
